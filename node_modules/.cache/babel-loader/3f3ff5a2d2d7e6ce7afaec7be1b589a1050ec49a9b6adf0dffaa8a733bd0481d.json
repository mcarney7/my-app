{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mcarn\\\\OneDrive\\\\Desktop\\\\Temp\\\\my-app\\\\src\\\\FilteredList.jsx\";\nimport React, { Component } from 'react';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport List from './List';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass FilteredList extends Component {\n  constructor(props) {\n    super(props);\n    // Add a new key/value pair in the state to keep track of type\n    // Sets the state whenever the user types on the search bar\n    this.onSearch = event => {\n      this.setState({\n        search: event.target.value.toLowerCase()\n      });\n    };\n    // TODO: Add a new method to handle dropdown selection\n    this.handleTypeChange = type => {\n      this.setState({\n        type\n      });\n    };\n    // TODO: Add a new method to filter produce based on type\n    this.filterType = item => {\n      const {\n        type\n      } = this.state;\n      return type === \"all\" || item.type.toLowerCase() === type.toLowerCase();\n    };\n    // TODO: Modify filterItem to consider both search and type filters\n    this.filterItem = item => {\n      return item.name.toLowerCase().search(this.state.search) !== -1 && this.filterType(item);\n    };\n    this.state = {\n      search: \"\",\n      type: \"all\" // \"all\" initially to show all produce\n    };\n  }\n  render() {\n    const produceTypes = [\"all\", \"fruit\", \"vegetable\"]; // Add other types as needed\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Produce Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search\",\n        onChange: this.onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropdownButton, {\n        title: `Filter by Type: ${this.state.type}`,\n        id: \"produce-type-dropdown\",\n        onSelect: this.handleTypeChange,\n        children: produceTypes.map(type => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          eventKey: type,\n          children: type.charAt(0).toUpperCase() + type.slice(1)\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        items: this.props.items.filter(this.filterItem)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default FilteredList;","map":{"version":3,"names":["React","Component","DropdownButton","Dropdown","List","jsxDEV","_jsxDEV","FilteredList","constructor","props","onSearch","event","setState","search","target","value","toLowerCase","handleTypeChange","type","filterType","item","state","filterItem","name","render","produceTypes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","title","id","onSelect","map","Item","eventKey","charAt","toUpperCase","slice","items","filter"],"sources":["C:/Users/mcarn/OneDrive/Desktop/Temp/my-app/src/FilteredList.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport List from './List';\r\n\r\nclass FilteredList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Add a new key/value pair in the state to keep track of type\r\n    this.state = {\r\n      search: \"\",\r\n      type: \"all\", // \"all\" initially to show all produce\r\n    };\r\n  }\r\n\r\n  // Sets the state whenever the user types on the search bar\r\n  onSearch = (event) => {\r\n    this.setState({ search: event.target.value.toLowerCase() });\r\n  }\r\n\r\n  // TODO: Add a new method to handle dropdown selection\r\n  handleTypeChange = (type) => {\r\n    this.setState({ type });\r\n  }\r\n\r\n  // TODO: Add a new method to filter produce based on type\r\n  filterType = (item) => {\r\n    const { type } = this.state;\r\n    return type === \"all\" || item.type.toLowerCase() === type.toLowerCase();\r\n  }\r\n\r\n  // TODO: Modify filterItem to consider both search and type filters\r\n  filterItem = (item) => {\r\n    return (\r\n      item.name.toLowerCase().search(this.state.search) !== -1 &&\r\n      this.filterType(item)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const produceTypes = [\"all\", \"fruit\", \"vegetable\"]; // Add other types as needed\r\n\r\n    return (\r\n      <div className=\"filter-list\">\r\n        <h1>Produce Search</h1>\r\n        <input type=\"text\" placeholder=\"Search\" onChange={this.onSearch} />\r\n\r\n        {/* TODO: Add DropdownButton and Dropdown.Item components */}\r\n        <DropdownButton\r\n          title={`Filter by Type: ${this.state.type}`}\r\n          id=\"produce-type-dropdown\"\r\n          onSelect={this.handleTypeChange}\r\n        >\r\n          {produceTypes.map((type) => (\r\n            <Dropdown.Item key={type} eventKey={type}>\r\n              {type.charAt(0).toUpperCase() + type.slice(1)}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </DropdownButton>\r\n\r\n        {/* Pass the filtered produce to the List component */}\r\n        <List items={this.props.items.filter(this.filterItem)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilteredList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}